// Converted from the tests for uBPF <https://github.com/iovisor/ubpf>
// Copyright 2015 Big Switch Networks, Inc
// Copyright 2016 6WIND S.A. <quentin.monnet@6wind.com>
//
// Licensed under the Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0> or
// the MIT license <http://opensource.org/licenses/MIT>, at your option. This file may not be
// copied, modified, or distributed except according to those terms.


// The tests contained in this file are extracted from the unit tests of uBPF software. Each test
// in this file has a name in the form `test_vm_<name>`, and corresponds to the (human-readable)
// code in `ubpf/tree/master/tests/<name>`, available at
// <https://github.com/iovisor/ubpf/tree/master/tests> (hyphen had to be replaced with underscores
// as Rust will not accept them in function names). It is strongly advised to refer to the uBPF
// version to understand what these program do.
//
// Each program was assembled from the uBPF version with the assembler provided by uBPF itself, and
// available at <https://github.com/iovisor/ubpf/tree/master/ubpf>.
// The very few modifications that have been realized should be indicated.

// These are unit tests for the eBPF interpreter.


extern crate rbpf;

use rbpf::helpers;
use rbpf::assembler::assemble;

#[test]
fn test_vm_add() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x0c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x3);
}

#[test]
fn test_vm_alu64_arith() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xb7, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xb7, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xb7, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0xb7, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0xb7, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0xb7, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0xb7, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
        0x0f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
        0x1f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x27, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x2f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x37, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x3f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x2a);
}

#[test]
fn test_vm_alu64_bit() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xb7, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xb7, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xb7, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0xb7, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0xb7, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0xb7, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x4f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x47, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
        0x57, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00,
        0xb7, 0x09, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00,
        0x5f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x67, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
        0x6f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x77, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x77, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
        0x7f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa7, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xaf, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x11);
}

#[test]
fn test_vm_alu_arith() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xb4, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xb4, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xb4, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0xb4, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0xb4, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0xb4, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0xb4, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
        0x0c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x14, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
        0x1c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x2c, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x34, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x3c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x2a);
}

#[test]
fn test_vm_alu_bit() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xb4, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xb4, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xb4, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0xb4, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0xb4, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0xb4, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x4c, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
        0x54, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00,
        0xb4, 0x09, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00,
        0x5c, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
        0x6c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
        0x7c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa4, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xac, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x11);
}

#[test]
fn test_vm_arsh32_high_shift() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x18, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xcc, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x4);
}

#[test]
fn test_vm_arsh() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,
        0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
        0xc4, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xffff8000);
}

#[test]
fn test_vm_arsh64() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x67, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,
        0xc7, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0xcf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xfffffffffffffff8);
}

#[test]
fn test_vm_arsh_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
        0xcc, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xffff8000);
}

#[test]
fn test_vm_be16() {
    let prog = &[
        0x69, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x11, 0x22
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1122);
}

#[test]
fn test_vm_be16_high() {
    let prog = &[
        0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1122);
}

#[test]
fn test_vm_be32() {
    let prog = &[
        0x61, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x11, 0x22, 0x33, 0x44
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x11223344);
}

#[test]
fn test_vm_be32_high() {
    let prog = &[
        0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x11223344);
}

#[test]
fn test_vm_be64() {
    let prog = &[
        0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1122334455667788);
}

#[test]
fn test_vm_call() {
    let prog = &[
        0xb7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xb7, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xb7, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xb7, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mut vm = rbpf::EbpfVmNoData::new(prog);
    vm.register_helper(0, helpers::gather_bytes);
    assert_eq!(vm.prog_exec(), 0x0102030405);
}

#[test]
fn test_vm_call_memfrob() {
    let prog = &[
        0xbf, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x79, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
    ];
    let mut vm = rbpf::EbpfVmRaw::new(prog);
    vm.register_helper(1, helpers::memfrob);
    assert_eq!(vm.prog_exec(mem), 0x102292e2f2c0708);
}

// TODO: helpers::trash_registers needs asm!().
// Try this again once asm!() is available in stable.
//#[test]
//fn test_vm_call_save() {
    //let prog = &[
        //0xb7, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        //0xb7, 0x07, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        //0xb7, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
        //0xb7, 0x09, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
        //0x85, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        //0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //0x4f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //0x4f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //0x4f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //0x4f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    //];
    //let mut vm = rbpf::EbpfVmNoData::new(prog);
    //vm.register_helper(2, helpers::trash_registers);
    //assert_eq!(vm.prog_exec(), 0x4321);
//}

#[test]
fn test_vm_div32_high_divisor() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x18, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x3c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x3);
}

#[test]
fn test_vm_div32_imm() {
    let prog = &[
        0x18, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x34, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x3);
}

#[test]
fn test_vm_div32_reg() {
    let prog = &[
        0x18, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x3c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x3);
}

#[test]
fn test_vm_div64_imm() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x67, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x37, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x300000000);
}

#[test]
fn test_vm_div64_reg() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x67, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x3f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x300000000);
}

#[test]
fn test_vm_early_exit() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x3);
}

// uBPF limits the number of user functions at 64. We don't.
//#[test]
//fn test_vm_err_call_bad_imm() {
//}

#[test]
#[should_panic(expected = "Error: unknown helper function (id: 0x3f)")]
fn test_vm_err_call_unreg() {
    let prog = &[
        0xb7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xb7, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xb7, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xb7, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x85, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    vm.prog_exec();
}

#[test]
#[should_panic(expected = "Error: division by 0")]
fn test_vm_err_div64_by_zero_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    vm.prog_exec();
}

#[test]
#[should_panic(expected = "Error: division by 0")]
fn test_vm_err_div_by_zero_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    vm.prog_exec();
}

#[test]
#[should_panic(expected = "Error: division by 0")]
fn test_vm_err_mod64_by_zero_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x9f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    vm.prog_exec();
}

#[test]
#[should_panic(expected = "Error: division by 0")]
fn test_vm_err_mod_by_zero_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x9c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    vm.prog_exec();
}

#[test]
#[should_panic(expected = "Error: out of bounds memory store (insn #1)")]
fn test_vm_err_stack_out_of_bound() {
    let prog = &[
        0x72, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    vm.prog_exec();
}

#[test]
fn test_vm_exit() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x0);
}

#[test]
fn test_vm_ja() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jeq_imm() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
        0x15, 0x01, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0x15, 0x01, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jeq_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
        0xb4, 0x02, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0x1d, 0x21, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0x1d, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jge_imm() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
        0x35, 0x01, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x35, 0x01, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jgt_imm() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x25, 0x01, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x25, 0x01, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x25, 0x01, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jgt_reg() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0xb7, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x2d, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2d, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2d, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jit_bounce() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xbf, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jne_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0xb4, 0x02, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0x5d, 0x21, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
        0x5d, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jset_imm() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x45, 0x01, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x45, 0x01, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jset_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0xb4, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x4d, 0x21, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x4d, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jsge_imm() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff,
        0x75, 0x01, 0x05, 0x00, 0xff, 0xff, 0xff, 0xff,
        0x75, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
        0x75, 0x01, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jsge_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff,
        0xb7, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xb4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7d, 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7d, 0x31, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xbf, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7d, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jsgt_imm() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff,
        0x65, 0x01, 0x04, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x65, 0x01, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_jsgt_reg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff,
        0xb7, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
        0x6d, 0x21, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x6d, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_lddw() {
    let prog = assemble("lddw r0, 0x1122334455667788
                         exit").unwrap();
    let vm = rbpf::EbpfVmNoData::new(&prog);
    assert_eq!(vm.prog_exec(), 0x1122334455667788);
}

#[test]
fn test_vm_lddw2() {
    let prog = &[
        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x80000000);
}

#[test]
fn test_vm_ldxb_all() {
    let prog = &[
        0xbf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x71, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x07, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x71, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x71, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x05, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x71, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x04, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
        0x71, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
        0x71, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
        0x71, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x71, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
        0x4f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x9876543210);
}

#[test]
fn test_vm_ldxb() {
    let prog = &[
        0x71, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0x11, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x11);
}

#[test]
fn test_vm_ldxdw() {
    let prog = &[
        0x79, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
        0x77, 0x88, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x8877665544332211);
}

#[test]
fn test_vm_ldxh_all() {
    let prog = &[
        0xbf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x69, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x09, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x69, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x69, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x07, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x69, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x06, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x69, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x05, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x05, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x04, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
        0x69, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
        0x69, 0x02, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
        0x69, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x69, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x67, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
        0x4f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,
        0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07,
        0x00, 0x08, 0x00, 0x09
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x9876543210);
}

#[test]
fn test_vm_ldxh_all2() {
    let prog = &[
        0xbf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x69, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x09, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x06, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x05, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x02, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x69, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x4f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08,
        0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80,
        0x01, 0x00, 0x02, 0x00
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x3ff);
}

#[test]
fn test_vm_ldxh() {
    let prog = &[
        0x69, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0x11, 0x22, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x2211);
}

#[test]
fn test_vm_ldxh_same_reg() {
    let prog = &[
        0xbf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x6a, 0x00, 0x00, 0x00, 0x34, 0x12, 0x00, 0x00,
        0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xff, 0xff
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1234);
}

#[test]
fn test_vm_ldxw_all() {
    let prog = &[
        0xbf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x61, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x09, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x07, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x06, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x05, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x04, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x03, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x02, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x61, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x4f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4f, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x030f0f);
}

#[test]
fn test_vm_ldxw() {
    let prog = &[
        0x61, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0x11, 0x22, 0x33, 0x44, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x44332211);
}

#[test]
fn test_vm_le16() {
    let prog = &[
        0x69, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xd4, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x22, 0x11
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1122);
}

#[test]
fn test_vm_le32() {
    let prog = &[
        0x61, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xd4, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x44, 0x33, 0x22, 0x11
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x11223344);
}

#[test]
fn test_vm_le64() {
    let prog = &[
        0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xd4, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1122334455667788);
}

#[test]
fn test_vm_lsh_reg() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x07, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x6f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x10);
}

#[test]
fn test_vm_mod() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x74, 0x16, 0x00, 0x00,
        0x94, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,
        0xb4, 0x01, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
        0x9c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x5);
}

#[test]
fn test_vm_mod32() {
    let prog = &[
        0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x94, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x0);
}

#[test]
fn test_vm_mod64() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x36, 0x84, 0x85, 0xb1,
        0x67, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x47, 0x00, 0x00, 0x00, 0xc8, 0xc5, 0x0d, 0x10,
        0xb4, 0x01, 0x00, 0x00, 0x3e, 0x26, 0xde, 0x0d,
        0x67, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x47, 0x01, 0x00, 0x00, 0xf3, 0xf7, 0xbe, 0x3c,
        0x9f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x97, 0x00, 0x00, 0x00, 0x78, 0x17, 0x8f, 0x65,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x30ba5a04);
}

#[test]
fn test_vm_mov() {
    let prog = &[
        0xb4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xbc, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_mul32_imm() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x24, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xc);
}

#[test]
fn test_vm_mul32_reg() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x2c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xc);
}

#[test]
fn test_vm_mul32_reg_overflow() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40,
        0xb7, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x2c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x4);
}

#[test]
fn test_vm_mul64_imm() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40,
        0x27, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x100000004);
}

#[test]
fn test_vm_mul64_reg() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40,
        0xb7, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x2f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x100000004);
}

#[test]
fn test_vm_mul_loop() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x07, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
        0x67, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x77, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x15, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x27, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x07, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
        0x55, 0x01, 0xfd, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x75db9c97);
}

#[test]
fn test_vm_neg64() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xfffffffffffffffe);
}

#[test]
fn test_vm_neg() {
    let prog = &[
        0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xfffffffe);
}

#[test]
fn test_vm_prime() {
    let prog = &[
        0xb7, 0x01, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x25, 0x01, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x3d, 0x12, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x55, 0x04, 0xf6, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_rhs32() {
    let prog = &[
        0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x74, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x00ffffff);
}

#[test]
fn test_vm_rsh_reg() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0xb7, 0x07, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x7f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0x1);
}

#[test]
fn test_vm_stack() {
    let prog = &[
        0xb7, 0x01, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
        0x7a, 0x0a, 0xf0, 0xff, 0xab, 0x00, 0x00, 0x00,
        0x7a, 0x0a, 0xf8, 0xff, 0xcd, 0x00, 0x00, 0x00,
        0x57, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x67, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xbf, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x79, 0x20, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let vm = rbpf::EbpfVmNoData::new(prog);
    assert_eq!(vm.prog_exec(), 0xcd);
}

#[test]
fn test_vm_stack2() {
    let prog = &[
        0x72, 0x0a, 0xfc, 0xff, 0x01, 0x00, 0x00, 0x00,
        0x72, 0x0a, 0xfd, 0xff, 0x02, 0x00, 0x00, 0x00,
        0x72, 0x0a, 0xfe, 0xff, 0x03, 0x00, 0x00, 0x00,
        0x72, 0x0a, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00,
        0xbf, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x1f, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0xa2, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x71, 0xa3, 0xfd, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x71, 0xa4, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x71, 0xa5, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa7, 0x00, 0x00, 0x00, 0x2a, 0x2a, 0x2a, 0x2a,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mut vm = rbpf::EbpfVmNoData::new(prog);
    vm.register_helper(0, helpers::gather_bytes);
    vm.register_helper(1, helpers::memfrob);
    assert_eq!(vm.prog_exec(), 0x01020304);
}

#[test]
fn test_vm_stb() {
    let prog = &[
        0x72, 0x01, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,
        0x71, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x11);
}

#[test]
fn test_vm_stdw() {
    let prog = &[
        0x7a, 0x01, 0x02, 0x00, 0x11, 0x22, 0x33, 0x44,
        0x79, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x44332211);
}

#[test]
fn test_vm_sth() {
    let prog = &[
        0x6a, 0x01, 0x02, 0x00, 0x11, 0x22, 0x00, 0x00,
        0x69, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x2211);
}

#[test]
fn test_vm_string_stack() {
    let prog = &[
        0xb7, 0x01, 0x00, 0x00, 0x61, 0x62, 0x63, 0x78,
        0x63, 0x1a, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x6a, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x6a, 0xf4, 0xff, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0x61, 0x62, 0x63, 0x79,
        0x63, 0x1a, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x01, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff,
        0xbf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x85, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x67, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x77, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x55, 0x01, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xbf, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x01, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff,
        0xbf, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x02, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff,
        0x85, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x77, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x1d, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mut vm = rbpf::EbpfVmNoData::new(prog);
    vm.register_helper(4, helpers::strcmp);
    assert_eq!(vm.prog_exec(), 0x0);
}

#[test]
fn test_vm_stw() {
    let prog = &[
        0x62, 0x01, 0x02, 0x00, 0x11, 0x22, 0x33, 0x44,
        0x61, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x44332211);
}

#[test]
fn test_vm_stxb() {
    let prog = &[
        0xb4, 0x02, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
        0x73, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x11);
}

#[test]
fn test_vm_stxb_all() {
    let prog = &[
        0xb7, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0xf2, 0x00, 0x00, 0x00,
        0xb7, 0x03, 0x00, 0x00, 0xf3, 0x00, 0x00, 0x00,
        0xb7, 0x04, 0x00, 0x00, 0xf4, 0x00, 0x00, 0x00,
        0xb7, 0x05, 0x00, 0x00, 0xf5, 0x00, 0x00, 0x00,
        0xb7, 0x06, 0x00, 0x00, 0xf6, 0x00, 0x00, 0x00,
        0xb7, 0x07, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00,
        0xb7, 0x08, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,
        0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x31, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x41, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x51, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x71, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x81, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0xf0f2f3f4f5f6f7f8);
}

#[test]
fn test_vm_stxb_all2() {
    let prog = &[
        0xbf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x01, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00,
        0xb7, 0x09, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00,
        0x73, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xff, 0xff
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0xf1f9);
}

#[test]
fn test_vm_stxb_chain() {
    let prog = &[
        0xbf, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x70, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x60, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x50, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x30, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x73, 0x10, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x71, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x2a);
}

#[test]
fn test_vm_stxdw() {
    let prog = &[
        0xb7, 0x02, 0x00, 0x00, 0x55, 0x66, 0x77, 0x88,
        0x67, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x47, 0x02, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
        0x7b, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x79, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x8877665544332211);
}

#[test]
fn test_vm_stxh() {
    let prog = &[
        0xb4, 0x02, 0x00, 0x00, 0x11, 0x22, 0x00, 0x00,
        0x6b, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x69, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x2211);
}

#[test]
fn test_vm_stxw() {
    let prog = &[
        0xb4, 0x02, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
        0x63, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x61, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0xaa, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xcc, 0xdd
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x44332211);
}

#[test]
fn test_vm_subnet() {
    let prog = &[
        0xb7, 0x02, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
        0x69, 0x13, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x55, 0x03, 0x02, 0x00, 0x81, 0x00, 0x00, 0x00,
        0xb7, 0x02, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
        0x69, 0x13, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x57, 0x03, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
        0x55, 0x03, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x0f, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x61, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x57, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
        0x15, 0x01, 0x01, 0x00, 0xc0, 0xa8, 0x01, 0x00,
        0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    let mem = &mut [
        0x00, 0x00, 0xc0, 0x9f, 0xa0, 0x97, 0x00, 0xa0,
        0xcc, 0x3b, 0xbf, 0xfa, 0x08, 0x00, 0x45, 0x10,
        0x00, 0x3c, 0x46, 0x3c, 0x40, 0x00, 0x40, 0x06,
        0x73, 0x1c, 0xc0, 0xa8, 0x01, 0x02, 0xc0, 0xa8,
        0x01, 0x01, 0x06, 0x0e, 0x00, 0x17, 0x99, 0xc5,
        0xa0, 0xec, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
        0x7d, 0x78, 0xe0, 0xa3, 0x00, 0x00, 0x02, 0x04,
        0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0x00, 0x9c,
        0x27, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
        0x03, 0x00
    ];
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1);
}


const PROG_TCP_PORT_80: [u8;152] = [
    0x71, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x71, 0x13, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x67, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x4f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0x03, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x71, 0x12, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0x02, 0x0a, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x71, 0x12, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x01, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x57, 0x02, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x67, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0f, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x69, 0x12, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x02, 0x02, 0x00, 0x00, 0x50, 0x00, 0x00,
    0x69, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0x01, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00,
    0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];

#[test]
fn test_vm_tcp_port80_match() {
    let mem = &mut [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x06,
        0x07, 0x08, 0x09, 0x0a, 0x08, 0x00, 0x45, 0x00,
        0x00, 0x56, 0x00, 0x01, 0x00, 0x00, 0x40, 0x06,
        0xf9, 0x4d, 0xc0, 0xa8, 0x00, 0x01, 0xc0, 0xa8,
        0x00, 0x02, 0x27, 0x10, 0x00, 0x50, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02,
        0x20, 0x00, 0xc5, 0x18, 0x00, 0x00, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44
    ];
    let prog = &PROG_TCP_PORT_80;
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1);
}

#[test]
fn test_vm_tcp_port80_nomatch() {
    let mem = &mut [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x06,
        0x07, 0x08, 0x09, 0x0a, 0x08, 0x00, 0x45, 0x00,
        0x00, 0x56, 0x00, 0x01, 0x00, 0x00, 0x40, 0x06,
        0xf9, 0x4d, 0xc0, 0xa8, 0x00, 0x01, 0xc0, 0xa8,
        0x00, 0x02, 0x00, 0x16, 0x27, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x02,
        0x20, 0x00, 0xc5, 0x18, 0x00, 0x00, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44
    ];
    let prog = &PROG_TCP_PORT_80;
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x0);
}

#[test]
fn test_vm_tcp_port80_nomatch_ethertype() {
    let mem = &mut [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x06,
        0x07, 0x08, 0x09, 0x0a, 0x08, 0x01, 0x45, 0x00,
        0x00, 0x56, 0x00, 0x01, 0x00, 0x00, 0x40, 0x06,
        0xf9, 0x4d, 0xc0, 0xa8, 0x00, 0x01, 0xc0, 0xa8,
        0x00, 0x02, 0x27, 0x10, 0x00, 0x50, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02,
        0x20, 0x00, 0xc5, 0x18, 0x00, 0x00, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44
    ];
    let prog = &PROG_TCP_PORT_80;
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x0);
}

#[test]
fn test_vm_tcp_port80_nomatch_proto() {
    let mem = &mut [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x06,
        0x07, 0x08, 0x09, 0x0a, 0x08, 0x00, 0x45, 0x00,
        0x00, 0x56, 0x00, 0x01, 0x00, 0x00, 0x40, 0x11,
        0xf9, 0x4d, 0xc0, 0xa8, 0x00, 0x01, 0xc0, 0xa8,
        0x00, 0x02, 0x27, 0x10, 0x00, 0x50, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02,
        0x20, 0x00, 0xc5, 0x18, 0x00, 0x00, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
        0x44, 0x44, 0x44, 0x44
    ];
    let prog = &PROG_TCP_PORT_80;
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x0);
}

const PROG_TCP_SACK: [u8;352] = [
    0x71, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x71, 0x13, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x67, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x4f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0x03, 0x25, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x71, 0x12, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0x02, 0x23, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x71, 0x12, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x01, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x57, 0x02, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x67, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0f, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x69, 0x14, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x77, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x57, 0x04, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,
    0xbf, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x02, 0x00, 0x00, 0xec, 0xff, 0xff, 0xff,
    0xb7, 0x05, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0xb7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x2d, 0x45, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xbf, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x67, 0x05, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0xc7, 0x05, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0xbf, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x71, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x05, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x15, 0x05, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xbf, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x05, 0x09, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0xbf, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x71, 0x43, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x67, 0x03, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0xc7, 0x03, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x6d, 0x32, 0xee, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];

#[test]
fn test_vm_tcp_sack_match() {
    let mem = &mut [
        0x00, 0x26, 0x62, 0x2f, 0x47, 0x87, 0x00, 0x1d,
        0x60, 0xb3, 0x01, 0x84, 0x08, 0x00, 0x45, 0x00,
        0x00, 0x40, 0xa8, 0xde, 0x40, 0x00, 0x40, 0x06,
        0x9d, 0x58, 0xc0, 0xa8, 0x01, 0x03, 0x3f, 0x74,
        0xf3, 0x61, 0xe5, 0xc0, 0x00, 0x50, 0xe5, 0x94,
        0x3f, 0x77, 0xa3, 0xc4, 0xc4, 0x80, 0xb0, 0x10,
        0x01, 0x3e, 0x34, 0xb6, 0x00, 0x00, 0x01, 0x01,
        0x08, 0x0a, 0x00, 0x17, 0x95, 0x6f, 0x8d, 0x9d,
        0x9e, 0x27, 0x01, 0x01, 0x05, 0x0a, 0xa3, 0xc4,
        0xca, 0x28, 0xa3, 0xc4, 0xcf, 0xd0
    ];
    let prog = &PROG_TCP_SACK;
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x1);
}

#[test]
fn test_vm_tcp_sack_nomatch() {
    let mem = &mut [
        0x00, 0x26, 0x62, 0x2f, 0x47, 0x87, 0x00, 0x1d,
        0x60, 0xb3, 0x01, 0x84, 0x08, 0x00, 0x45, 0x00,
        0x00, 0x40, 0xa8, 0xde, 0x40, 0x00, 0x40, 0x06,
        0x9d, 0x58, 0xc0, 0xa8, 0x01, 0x03, 0x3f, 0x74,
        0xf3, 0x61, 0xe5, 0xc0, 0x00, 0x50, 0xe5, 0x94,
        0x3f, 0x77, 0xa3, 0xc4, 0xc4, 0x80, 0x80, 0x10,
        0x01, 0x3e, 0x34, 0xb6, 0x00, 0x00, 0x01, 0x01,
        0x08, 0x0a, 0x00, 0x17, 0x95, 0x6f, 0x8d, 0x9d,
        0x9e, 0x27
    ];
    let prog = &PROG_TCP_SACK;
    let vm = rbpf::EbpfVmRaw::new(prog);
    assert_eq!(vm.prog_exec(mem), 0x0);
}
